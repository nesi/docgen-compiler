#!/usr/bin/python

# This script checks the articles currently on Zendesk, looking for articles
# of the same name in the same category and section (i.e., duplicate articles),
# and also articles that exist on Zendesk but do not exist in the local
# article repository. A list of those that are found will be reported to the
# operator.
#
# Written by Benjamin Roberts (2015)

import sys
import os
import fnmatch
import getopt
import re
import subprocess

ok = 0
warning = 1
critical = 2
unknown = 3

progname = os.path.basename(__file__)
packagedir = os.path.dirname(os.path.abspath(__file__))
articledir = None
include_drafts = False
include_outdated = False
custom_whitelist_file = None
zendeskapidir = None
tmpdir = os.path.join(os.sep, "tmp", progname)
lockfile = os.path.join(tmpdir, "lockfile")

try:
    opts, args = getopt.getopt(sys.argv[1:], "a:dhow:z:", ["article-dir=", "include-drafts", "help", "include-outdated", "whitelist=", "zendesk-api-dir="])
except getopt.GetoptError as err:
    print str(err)
    usage()
    raise SystemExit(critical)

for (opt, arg) in opts:
    if opt in ("-a", "--article-dir"):
        articledir = arg
    elif opt in ("-d", "--include-drafts"):
        include_drafts = True
    elif opt in ("-h", "--help"):
        usage()
        raise SystemExit(ok)
    elif opt in ("-o", "--include-outdated"):
        include_outdated = True
    elif opt in ("-w", "--whitelist"):
        custom_whitelist_file = arg
    elif opt in ("-z", "--zendesk-api-dir"):
        zendeskapidir = arg
    else:
        assert False, "Unhandled option: {}".format(opt)

if not zendeskapidir:
    print "Please specify the directory containing the Zendesk API scripts with the -z flag"
    raise SystemExit(critical)

if not articledir:
    print "Please specify the directory containing Zendesk articles with the -a flag"
    raise SystemExit(critical)

if os.path.lexists(tmpdir) and not os.path.isdir(tmpdir):
    print """{} exists but is not a directory. Please remove {} or ask an administrator to do so.""".format(tmpdir)
    raise SystemExit(critical)

for d in articledir, zendeskapidir:
    if not os.path.isdir(d):
            print "{}: not a directory".format(d)
            raise SystemExit(critical)

if not os.path.isdir(os.path.join(articledir, ".git")):
    print "{}: not a Git repository".format(articledir)
    raise SystemExit(critical)

if not custom_whitelist_file:
    whitelist_file = os.path.join(articledir, "whitelist.txt") 
    print "Note: No custom whitelist has been specified. Using {}".format(whitelist_file)
elif not os.path.isfile(whitelist_file):
    print "{}: not a file".format(whitelist_file)
    raise SystemExit(critical)
else:
    whitelist_file = custom_whitelist_file

if os.path.lexists(lockfile):
    print "Lock file {} already exists".format(lockfile)
    raise SystemExit(critical)
open(lockfile, 'w').close()

print "Accessing the documentation repository ..."
initial_dir = os.getcwd()
os.chdir(articledir)
devnull_fh = open(os.devnull, 'w')

branches = subprocess.check_output(["git", "branch"]).splitlines()
for branch in branches:
    unstarred = re.sub(r'^\* ', '', branch)
    if branch == unstarred: continue
    initial_branch = unstarred

if initial_branch != "master":
    print "Switching to the master branch ..."
    subprocess.check_call(["git", "checkout", "master"], stdout=devnull_fh, stderr=subprocess.STDOUT)
    subprocess.check_call(["git", "pull"], stdout=devnull_fh, stderr=subprocess.STDOUT)

print "Building a list of articles in the repository ..."
local_articles = []
for local_article_file in os.listdir(articledir):
    local_article_fullpath = os.path.join(articledir, local_article_file)
    if not os.path.isfile(local_article_fullpath):
        continue
    elif not fnmatch.fnmatch(local_article_fullpath, '*.md'):
        continue
    else:
        local_article = {}
        category_line = None
        section_line = None
        title_line = None
        with open(local_article_fullpath, 'r') as local_article_fh:
            category_line = local_article_fh.readline().rstrip()
            section_line = local_article_fh.readline().rstrip()
            title_line = local_article_fh.readline().rstrip()
        local_article['category'] = re.sub(r'^Category:\s+', '', category_line)
        local_article['section'] = re.sub(r'^Section:\s+', '', section_line)
        local_article['title'] = re.sub(r'^Title:\s+', '', title_line)
        local_articles.append(local_article)

print "Building a whitelist of articles not under version control ..."
whitelist = []
with open(whitelist_file, 'r') as whitelist_fh:
    whitelist = whitelist_fh.read().splitlines()

if initial_branch != "master":
    print "Switching back to the {} branch ...".format(initial_branch)
    subprocess.check_call(["git", "checkout", initial_branch], stdout=devnull_fh, stderr=subprocess.STDOUT)

# We shouldn't need to build a data structure here
# (we should be able to just iterate over the data)
#
# Mapping:
# 0 = ID
# 1 = Category
# 2 = Section
# 3 = Title
# 4 = Draft
# 5 = Outdated
exe_file = os.path.join(zendeskapidir, "list_articles")
tmp_file = os.path.join(tmpdir, "list_articles.txt")

zd_list_obtained = False
while not zd_list_obtained:
    try:
        subprocess.check_call(["python", exe_file, "-o", tmp_file])
        zd_list_obtained = True
    except subprocess.CalledProcessError:
        pass
    

with open(tmp_file, 'r') as list_fh:
    zd_articles = list_fh.read().splitlines()
    for zd_article_str in zd_articles:
        zd_article = zd_article_str.split('\t')

        # The following strings are text rather than boolean
        # Skip draft articles unless -d has been set
        if not include_drafts and zd_article[4] == "True":
            continue
        # Skip outdated articles unless -o has been set
        if not include_outdated and zd_article[5] == "True":
            continue

        for whitelist_entry in whitelist:
            if zd_article[0] == whitelist_entry: break
        else:
            exists = False
            for local_article in local_articles:
                good = [False, False, False]
                good[0] = (local_article['category'] == zd_article[1])
                good[1] = (local_article['section'] == zd_article[2])
                good[2] = (local_article['title'] == zd_article[3])
                if all(good):
                    exists = True
                    break

            if not exists:
                print "Bad article in Zendesk: {1}/{2}/{3} (ID: {0})".format(*zd_article)

os.chdir(initial_dir)
os.remove(tmp_file)
os.remove(lockfile)
