#!/usr/bin/python

# This script gathers information from the following sources:
#  - text files containing lists of modules (from module whatis) on NeSI
#    clusters
#  - text files containing lists of supplementary modules for each NeSI
#    cluster, maintained manually by staff and under Git version control
#
# It collects such information and generates the following as output:
#  - HTML tables containing the versions of each package that NeSI makes
#    available, and on which machine(s) each version may be found
#  - Markdown files containing a documentation stub, in cases where there
#    is no such documentation already. Such Markdown files are intended to
#    be reviewed and (usually) edited by, firstly, the NeSI staff member
#    who is most familiar with the package (usually, but not necessarily,
#    the one who installed it), and secondly a member of the documentation
#    editorial team.
#
# A further step (not performed by this script) will assemble the markdown
# file once it has been reviewed and edited and the version table, and write
# generate from the combined text a new HTML file. The script that does that
# processing will then call the Zendesk API to upload the HTML via the REST
# interface directly to Zendesk.
#
# Written by Benjamin Roberts (2015)

import sys
import os
import filecmp
import fnmatch
import getopt
import getpass
import re
import smtplib
import socket
import subprocess
import textwrap

ok = 0
warning = 1
critical = 2
unknown = 3

warnings = []
info = []
maxlength = 1024
draftsbranch = 'drafts'

progname = os.path.basename(__file__)
packagedir = os.path.dirname(os.path.abspath(__file__))
template = os.path.join(packagedir, "Template.md")
automoddir = None
suppmoddir = None
infodir = None
versiontabledir = None
exclusion_file = None
mapping_file = None
truncate = False
cron = False
tmpdir = os.path.join(os.sep, "tmp", progname)
lockfile = os.path.join(tmpdir, "lockfile")
versiondir = os.path.join(tmpdir, "versions")
blurbdir = os.path.join(tmpdir, "blurbs")

try:
    opts, args = getopt.getopt(sys.argv[1:], "a:chi:m:s:tx:", ["automatic-modules-dir=", "cron", "help", "package-info-dir=", "mapping-file=", "supplementary-modules-dir=", "truncate", "exclusion-file="])
except getopt.GetoptError as err:
    print str(err)
    usage()
    raise SystemExit(critical)

for (opt, arg) in opts:
    if opt in ("-a", "--automatic-modules-dir"):
        automoddir = arg
    elif opt in ("-c", "--cron"):
        cron = True
    elif opt in ("-h", "--help"):
        usage()
        raise SystemExit(ok)
    elif opt in ("-i", "--package-info-dir"):
        infodir = arg
    elif opt in ("-m", "--mapping-file"):
        mapping_file = arg
    elif opt in ("-s", "--supplementary-modules-dir"):
        suppmoddir = arg
    elif opt in ("-t", "--truncate"):
        truncate = True
    elif opt in ("-x", "--exclusion-file"):
        exclusion_file = arg
    else:
        assert False, "Unhandled option: {}".format(opt)

if not automoddir:
    print """Please specify a directory containing automatically generated module lists using the -a flag"""
    raise SystemExit(critical)
elif not suppmoddir:
    print """Please specify a directory containing supplementary module lists using the -s flag"""
    raise SystemExit(critical)
elif not infodir:
    print "Please specify a directory to hold package information using the -i flag"
    raise SystemExit(critical)

# Create temporary directories and a lockfile if needed.
if os.path.lexists(tmpdir) and not os.path.isdir(tmpdir):
    print """{} exists but is not a directory. Please remove {} or ask an administrator to do so.""".format(tmpdir)
    raise SystemExit(critical)

for d in (suppmoddir, automoddir, infodir):
    if not os.path.isdir(d):
        print "{}: not a directory".format(d)
        raise SystemExit(critical)

if not os.path.isdir(os.path.join(infodir, ".git")):
    print "{}: not a Git repository".format(infodir)
    raise SystemExit(critical)

docdir = os.path.join(infodir, "doc")
if not os.path.isdir(docdir):
    print "{} contains no \"doc\" subdirectory".format(infodir)
    raise SystemExit(critical)
versiontabledir = os.path.join(infodir, "versions")
if not os.path.isdir(versiontabledir):
    print "{} contains no \"versions\" subdirectory".format(infodir)
    raise SystemExit(critical)

if os.path.samefile(automoddir,suppmoddir):
    print "The values given to the -a and -s flags must point to different directories"
    raise SystemExit(critical)

if not exclusion_file:
    exclusion_file = os.path.join(suppmoddir, "exclusions.txt")
    info.append("Using default exclusion file location: {}".format(exclusion_file))

exclusions = []
if not os.path.isfile(exclusion_file):
    print "{}: not a file".format(exclusion_file)
    raise SystemExit(critical)
else:
    with open(exclusion_file, 'r') as exclusion_fh:
        exclusions = exclusion_fh.read().splitlines()

if not mapping_file:
    mapping_file = os.path.join(suppmoddir, "mappings.txt")
    info.append("Using default mapping file location: {}".format(mapping_file))

mappings = {}
linecount = 0
if not os.path.isfile(mapping_file):
    print "{}: not a file".format(mapping_file)
    raise SystemExit(critical)
else:
    with open(mapping_file, 'r') as mapping_fh:
        for line in mapping_fh:
            linecount += 1
            (key, val) = line.split()
            if key in mappings:
                print "{} has multiple entries in {} -- check line {}".format(key,mapping_file,linecount)
                raise SystemExit(critical)
            mappings[key] = val

for exclusion in exclusions:
    if exclusion in mappings:
        print "{} should be in either {} or {}, not both".format(exclusion, exclusion_file, mapping_file)
        raise SystemExit(critical)

try:
    os.makedirs(versiondir)
except OSError:
    pass
try:
    os.makedirs(blurbdir)
except OSError:
    pass

if os.path.lexists(lockfile):
    print "Lock file {} already exists".format(lockfile)
    raise SystemExit(critical)
open(lockfile, 'w').close()

supplementary = False
for mldir in automoddir, suppmoddir:
    if mldir == suppmoddir:
        supplementary = True
    else:
        supplementary = False
    for mlfilename in sorted(os.listdir(mldir)):
        if fnmatch.fnmatch(mlfilename, ".*"):
            continue
        mlfullpath = os.path.join(mldir, mlfilename)
        if not os.path.isfile(mlfullpath):
            warnings.append("{}: not a file".format(mlfullpath))
            continue
        if mlfullpath == mapping_file or mlfullpath == exclusion_file:
            # Skip the mapping and exclusion files
            # (this allows them to be put in with the supplementary files)
            continue
        (machine, mlfileext) = os.path.splitext(mlfilename)
        linecount = 0
        with open(mlfullpath, 'r') as mlfilehandle:
            seen_modules = []
            for line in mlfilehandle:
                module = ''
                blurb = ''
                packagename = ''
                version = ''
                linecount += 1
                if not line:
                    continue
                try:
                    (module, blurb) = re.split(r"\s*:\s*", line, 1)
                except ValueError:
                    module = line

                if module in seen_modules:
                    continue
                else:
                    seen_modules.append(module)

                try:
                    (packagename, version) = re.split(r"\s*/\s*", module, 1)
                except ValueError:
                    packagename = module

                if not packagename:
                    warnings.append("No package name found on line {} of file {}".format(linecount, mlfullpath))
                    continue
                elif packagename in exclusions:
                    continue
                elif packagename in mappings:
                    packagename = mappings[packagename]

                if not version:
                    version = "No version information available"
                if not blurb:
                    blurb = "No blurb available"

                tempautoverfile = os.path.join(versiondir, "{}.auto".format(packagename))
                tempsuppverfile = os.path.join(versiondir, "{}.supp".format(packagename))
                tempblurbfile = os.path.join(blurbdir, "{}.md".format(packagename))

                if supplementary:
                    with open(tempsuppverfile, "a") as tsvfh:
                        if os.path.getsize(tempsuppverfile) == 0:
                            tsvfh.write("""## Additional supported packages

<table>
  <tr>
    <th>Version</th>
    <th>NeSI Cluster</th>
  </tr>
""")
                        tsvfh.write("""  <tr>
    <td>{}</td>
    <td>{}</td>
  </tr>
""".format(module, machine))
            
                    with open(tempblurbfile, "a") as tbfh:
                        tbfh.write("""
## {} (no module) on {}

{}""".format(module, machine, textwrap.wrap(blurb,80)))
                else:
                    with open(tempautoverfile, "a") as tavfh:
                        if os.path.getsize(tempautoverfile) == 0:
                            tavfh.write("""## Packages with modules

<table>
  <tr>
    <th>Module</th>
    <th>NeSI Cluster</th>
  </tr>
""")
                        tavfh.write("""  <tr>
    <td>{}</td>
    <td>{}</td>
  </tr>
""".format(module, machine))
            
                    with open(tempblurbfile, "a") as tbfh:
                        tbfh.write("""
## {} (module) on {}

{}""".format(module, machine, textwrap.wrap(blurb,80)))

# Cobble together an HTML version table from the automatically-generated and
# supplementary version tables.
for tempversionpart in sorted(os.listdir(versiondir)):
    if not re.match(r"^.*\.(supp|auto)$", tempversionpart):
        warnings.append("Unexpected temporary file: {}".format(tempversionpart))
        continue
    tempversionpath = os.path.join(versiondir, tempversionpart)
    (packagename, ext) = os.path.splitext(tempversionpart)

    tempversionwhole = os.path.join(versiondir, "{}.html".format(packagename))
    with open(tempversionwhole, "a") as tvwfh:
        with open(tempversionpath, "r") as tvpfh:
            for line in tvpfh:
                tvwfh.write(line)
        tvwfh.write("</table>")
    
    os.remove(tempversionpath)

newstubs = []
curdir = os.getcwd()
os.chdir(infodir)
devnull_fh = open(os.devnull, 'w')

# Start by ensuring that we're working on the master branch, to get
# the published versions of things.
branches = subprocess.check_output(["git", "branch"]).splitlines()
for branch in branches:
    unstarred = re.sub(r'^\* ', '', branch)
    if branch == unstarred: continue
    initial_branch = unstarred

if initial_branch != "master":
    info.append("Switching to the master branch ...")
    subprocess.check_call(["git", "checkout", "master"], stdout=devnull_fh, stderr=subprocess.STDOUT)
    subprocess.check_call(["git", "pull"], stdout=devnull_fh, stderr=subprocess.STDOUT)

version_notify = {}
for tempversionwhole in sorted(os.listdir(versiondir)):
    if not fnmatch.fnmatch(tempversionwhole, "*.html"):
        warnings.append("Unexpected temporary file: {}".format(tempversionwhole))
        continue
    tempversionpath = os.path.join(versiondir, tempversionwhole)
    (packagename, ext) = os.path.splitext(tempversionwhole)

    permversionfile = os.path.join(versiontabledir, "{}.html".format(packagename))
    for existing_pv_file in os.listdir(versiontabledir):
        vt_html_lc = "{0}.html".format(packagename.lower())
        if vt_html_lc == existing_pv_file.lower():
            warnings.append("{0}: stub with different case already exists: {1}".format(packagename, existing_pv_file))
            break
    else:
        if not os.path.isfile(permversionfile):
            info.append("Creating a new table of available versions for package {}".format(packagename))
            os.rename(tempversionpath, permversionfile)
            subprocess.check_call(["git", "add", permversionfile], stdout=devnull_fh, stderr=subprocess.STDOUT)
            subprocess.check_call(["git", "commit", "-m", "New version table for package {}".format(packagename), permversionfile], stdout=devnull_fh, stderr=subprocess.STDOUT)
        # Compare the old (permanent) and new ("temporary") files
        elif not filecmp.cmp(tempversionpath, permversionfile, shallow=False):
            info.append("Available versions of {} have changed. The documentation will be updated.".format(packagename))
            os.rename(tempversionpath, permversionfile)
            subprocess.check_call(["git", "add", permversionfile], stdout=devnull_fh, stderr=subprocess.STDOUT)
            subprocess.check_call(["git", "commit", "-m", "Updated version table for package {}".format(packagename), permversionfile], stdout=devnull_fh, stderr=subprocess.STDOUT)
            version_notify[packagename] = True
        else:
            os.remove(tempversionpath)

# Push to the remote.
subprocess.check_call(["git", "push", "origin", "master"], stdout=devnull_fh, stderr=subprocess.STDOUT)

for blurbfile in sorted(os.listdir(blurbdir)):
    if not fnmatch.fnmatch(blurbfile, "*.md"):
        warnings.append("Unexpected temporary file: {}".format(blurbfile))
        continue
    tempblurbpath = os.path.join(blurbdir, blurbfile)
    permblurbpath = os.path.join(docdir, blurbfile)

    #if not cron:
    #    print "Making sure a documentation file exists for software package {} ...".format(packagename)
   
    # Do we have a published page for this package?
    if os.path.isfile(permblurbpath):
        os.remove(tempblurbpath)
    else:
        newstubs.append(blurbfile)

subprocess.check_call(["git", "fetch"], stdout=devnull_fh, stderr=subprocess.STDOUT)
subprocess.check_call(["git", "checkout", draftsbranch], stdout=devnull_fh, stderr=subprocess.STDOUT)
# Make sure the drafts branch is up to date with its own remote tracking branch
subprocess.check_call(["git", "pull"], stdout=devnull_fh, stderr=subprocess.STDOUT)
subprocess.check_call(["git", "merge", "master", "-m", "Automatic merge from master"], stdout=devnull_fh, stderr=subprocess.STDOUT)

for blurbfile in newstubs:
    tempblurbpath = os.path.join(blurbdir, blurbfile)
    permblurbpath = os.path.join(docdir, blurbfile)
    (packagename, ext) = os.path.splitext(blurbfile)

    version_notify[packagename] = False
    if not os.path.isfile(permblurbpath):
        info.append("Creating a new documentation stub for {}".format(packagename))
        with open(tempblurbpath, 'r') as tbfh:
            tempblurb = tbfh.read()
        with open(permblurbpath, 'a') as pbfh:
            with open(template, 'r') as mdtemplate:
                for line in mdtemplate:
                    #line = re.sub(r'^Title:\s+(.*)\n$', "Title: {}".format(packagename), line)
                    line = re.sub(r'<<PACKAGENAME>>', packagename, line)
                    line = re.sub(r"^<!--This is a placeholder for a description. Do not edit.-->$", tempblurb, line)
                    pbfh.write(line)
        subprocess.check_call(["git", "add", permblurbpath], stdout=devnull_fh, stderr=subprocess.STDOUT)
        subprocess.check_call(["git", "commit", "-m", "New documentation stub for package {}".format(packagename), permblurbpath], stdout=devnull_fh, stderr=subprocess.STDOUT)

    os.remove(tempblurbpath)

# Push to the remote.
subprocess.check_call(["git", "push", "origin", draftsbranch], stdout=devnull_fh, stderr=subprocess.STDOUT)

# Switch back to the starting branch.
subprocess.check_call(["git", "checkout", initial_branch], stdout=devnull_fh, stderr=subprocess.STDOUT)

if any(version_notify.itervalues()):
    # Modify the modification time for the affected info documents
    # so publish_docs knows to refresh them
    for pn, vn in version_notify.iteritems():
        if vn:
            os.utime(os.path.join(docdir, "{0}.md".format(pn)), None)
    try:
        sender = "{}@{}".format(getpass.getuser(),socket.gethostname())
        recipients = ["support@nesi.org.nz"]
        message = """From: NeSI Documentation Server {}
To: NeSI Support <{}>
Subject: Request to regenerate documentation

The automatic process to generate version tables and documentation stubs has detected new scientific software versions. The version tables have been updated accordingly. Please consider uploading the changed version tables to the public-facing pages on NeSI Support.""".format(sender, recipients[0])
        smtpObj = smtplib.SMTP('localhost')
        smtpObj.sendmail(sender, recipients, message)
    except smtplib.SMTPException:
        warnings.append("Could not send an email to Zendesk requesting a version table refresh.")

os.chdir(curdir)
devnull_fh.close()
os.rmdir(versiondir)
os.rmdir(blurbdir)
os.remove(lockfile)

outputFooter = "To see the full report, run {} at the command line on {}.".format(os.path.join(packagedir,progname),socket.gethostname())
actualmaxlength = maxlength - len(outputFooter) - 31

exitStatus = ok
outputText = []
if len(warnings) > 0:
    outputText.append("{} warnings were raised while generating documentation stubs and version tables".format(len(warnings)))
    exitStatus = warning
    outputText.append("")
    outputText.extend(warnings)
else:
    outputText.append("Documentation stubs and version tables were successfully generated")
if len(info) > 0:
    outputText.append("")
    outputText.extend(info)

linecount = 0
totalprinted = 0
for outputLine in outputText:
    # Set the total number of lines that would be printed
    # if this line were printed.
    linecount += 1
    # Set the total number of characters that would be printed
    # if this line were printed.
    totalprinted += (len(outputLine) + 1)
    if not cron or (cron and exitStatus > 0):
        if totalprinted < actualmaxlength or not truncate:
            print outputLine
        else:
            print "({} more lines in output)".format(len(outputText)-(linecount-1))
            print ""
            print outputFooter
            break

raise SystemExit(exitStatus)
