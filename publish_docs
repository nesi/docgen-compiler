#!/bin/bash

# This script gathers information from the following sources:
#  - HTML tables containing the versions of each package that NeSI makes
#    available, and on which machine(s) each version may be found
#  - Markdown files containing a documentation stub
#
# This script assembles the HTML table and Markdown file for each pa

function get_abs_filename() {
	# $1 : relative filename
	echo "$(cd "$(dirname "$1")" && pwd)/$(basename "$1")"
}

progname=$(basename $0)
tmpdir="/tmp/${progname}"
olddir=$(pwd)

# Execute getopt
ARGS=$(getopt -o i:v:z: -l "package-info-dir:,version-table-dir:,zendesk-api-dir:" -n "${progname}" -- "$@");

#Bad arguments
if [ $? -ne 0 ];
then
	exit 2
fi

eval set -- "$ARGS";

while true
do
	case "$1" in
	-i|--package-info-dir)
		shift
		if [ -n "$1" ]
		then
			infodir=$1
			shift
		fi
		;;
	-v|--version-table-dir)
		shift
		if [ -n "$1" ]
		then
			versiontabledir=$1
			shift
		fi
		;;
	-z|--zendesk-api-dir)
		shift
		if [ -n "$1" ]
		then
			zendeskapidir=$1
			shift
		fi
		;;
	--)
		shift
		break
		;;
	esac
done

gitrepo=false
if [ -z "${infodir}" ]
then
	echo "Please specify a package information directory using the -i flag"
	exit 2
elif [ ! -d "${infodir}" ]
then
	echo "${infodir}: not a directory"
	exit 2
else
       	if [ -d "${infodir}/.git" ]
	then
		gitrepo=true
	fi
	infodir=$(get_abs_filename "${infodir}")
fi

if [ -z "${versiontabledir}" ]
then
	echo "Please specify a version table directory using the -v flag"
	exit 2
elif [ ! -d "${versiontabledir}" ]
then
	echo "${versiontabledir}: not a directory"
	exit 2
else
	versiontabledir=$(get_abs_filename "${versiontabledir}")
fi

if [ -z "${zendeskapidir}" ]
then
	echo "Please specify a Zendesk API directory using the -z flag"
	exit 2
elif [ ! -d "${zendeskapidir}" ]
then
	echo "${zendeskapidir}: not a directory"
	exit 2
else
	zendeskapidir=$(get_abs_filename "${zendeskapidir}")
fi

# Test for the existence of a lockfile.
# Create one if it is absent.
mkdir -p ${tmpdir}
lockfile=${tmpdir}/lockfile
if [ -e "${lockfile}" ]
then
	echo "error: ${lockfile} exists."
	echo "Check to make sure that no other instance of $progname is running."
	echo "If necessary, remove ${lockfile} or ask an administrator to do so."
	exit 1
else
	touch ${lockfile}
fi

# Ensure that the most current version of the master branch is being used
cd ${infodir}
if [ "${gitrepo}" = true ]
then
	git checkout master
	git pull
fi

# Save the current time (when the upload is about to start)
last_update="${infodir}/.last_update"
if [ ! -f "${last_update}" ]
then
	echo "Note: No last update found -- running from the beginning of time."
	echo "@0" > "${last_update}"
fi
lasttime=$(date -f "${last_update}" +%c)
curtime=$(date +%s)

find "${infodir}" \( ! -regex '.*/\..*' \) -type f -and -newermt "${lasttime}" -print0 | while read -r -d "" file
do
	# Get a package name (the file name minus the extension)
	basefile=$(basename $file)
	packagename=${basefile%.*}
	extension=${basefile##*.}
	category=$(head -1 ${file} | sed -e 's/^[Cc]ategory:[[:space:]]//')
	versionfile=${versiontabledir}/${packagename}.html
	to_upload=${tmpdir}/${basefile}

	if [ "${extension}" != "md" ]
	then
		continue
	elif [[ "${category}" == "Available Software" ]]
	then
		if [ ! -f ${versionfile} ]
		then
			echo "error: no version table found for $packagename"
			continue
		else
			echo "Finalising documentation for $packagename"
			awk -v f="${versionfile}" 'BEGIN {while (getline < f) txt=txt $0 "\n"} /<!--This is a placeholder for an automatically generated table. Do not edit.-->/ {sub("<!--This is a placeholder for an automatically generated table. Do not edit.-->", txt)} 1' ${file} > ${to_upload}
		fi
	else
		echo "Finalising documentation for $packagename"
		cat ${file} > ${to_upload}
	fi
done


if [ -n "$(find ${tmpdir} -maxdepth 1 -name "*.md" -print -quit)" ]
then
	echo "Uploading articles to Zendesk ..."
	${zendeskapidir}/upload_article ${tmpdir}/*.md
	upload_status=$?
	if [ ${upload_status} -eq 0 ]
	then
		echo "Upload complete."
		echo "@${curtime}" > "${last_update}"
	else
		echo "$progname: error: upload failed"
	fi
else
	echo "All Zendesk articles are apparently up to date. Nothing to do."
	echo "If you believe this is not correct, please delete the file"
	echo ""
	echo "      ${last_update}"
	echo ""
	echo "and run this script again."
fi

# Change back to the original working directory and remove the temporary
# directory
cd $olddir
rm -r ${tmpdir}
